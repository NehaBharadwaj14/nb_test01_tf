def branch_selected="${params.branch}"
pipeline {
    agent none

    parameters {
        choice(name: 'stack', choices: ['dev', 'stg', 'live'], description: 'Deployment Environment / Stack')
        choice(name: 'action', choices: ['apply', 'destroy','autoapply','autodestroy'], description: 'Action for Deployment ')
        gitParameter branchFilter: '',  description: 'branch', defaultValue: 'master', name: 'branch', type: 'PT_BRANCH', listSize: '1'

    }

    
    environment {
      COMPONENT='infra'
      STACK="${params.stack}"
      ACTION="${params.action}"
      REGION='eu-west-1'
      PROJECT="${params.project}"
           
    }
   
    stages { 

        stage ('Set Environment Parameters') {
            steps {
                script {
                    if(env.STACK == 'dev'){
                            println("---------------")
                            println("Development")
                            println("---------------")
                            
                            env.TERRAFORM_CMD = 'docker run --network host -w /app -v `pwd`:/app 109227185188.dkr.ecr.eu-west-1.amazonaws.com/bmj-terraform:latest'
                            echo "${env.TERRAFORM_CMD}"
                            env.DOCKER_IMAGE = '109227185188.dkr.ecr.eu-west-1.amazonaws.com/bmj-terraform:latest'
                            echo "${env.DOCKER_IMAGE}" 
                    }
                    if(env.STACK == 'stg'){
                            println("---------------")
                            println("Staging")
                            println("---------------")
                            env.TERRAFORM_CMD = 'docker run --network host -w /app -v `pwd`:/app 138832992068.dkr.ecr.eu-west-1.amazonaws.com/bmj-terraform:latest'
                            echo "${env.TERRAFORM_CMD}"
                            env.DOCKER_IMAGE = '138832992068.dkr.ecr.eu-west-1.amazonaws.com/bmj-terraform:latest'
                            echo "${env.DOCKER_IMAGE}" 
                    }
                    if(env.STACK == 'live'){
                               println("---------------")
                               println("Live")
                               println("---------------")
                            env.TERRAFORM_CMD = 'docker run --network host -w /app -v `pwd`:/app 721468132385.dkr.ecr.eu-west-1.amazonaws.com/bmj-terraform:latest'
                            echo "${env.TERRAFORM_CMD}"
                            env.DOCKER_IMAGE = '721468132385.dkr.ecr.eu-west-1.amazonaws.com/bmj-terraform:latest'
                            echo "${env.DOCKER_IMAGE}" 
                    }
                }
            }
        }

        
        
        //************
        // fetch
        //************
        stage('Fetch Terraform Modules') {
            agent { 
                label "jenkins-slave-${params.stack}-301.internal.tf.aws.bmjgroup.com" 
            }
            steps {
              checkout([
                    $class: 'GitSCM', 
                    branches: [[ name: "${params.branch}" ]],
                    doGenerateSubmoduleConfigurations: false, 
                    extensions: [[
                    $class: 'SubmoduleOption', 
                    disableSubmodules: false, 
                    parentCredentials: true, 
                    recursiveSubmodules: true, 
                    reference: '', 
                    trackingSubmodules: true
                    ]], 
                    submoduleCfg: [], 
                    userRemoteConfigs: scm.userRemoteConfigs
                ])
            }
        }
        //-----------------------------------------------------------------------------------------                     
        // Pull Terraform Container
        //-----------------------------------------------------------------------------------------                     
        stage('Pull Terraform Container') {
            agent { 
                label "jenkins-slave-${params.stack}-301.internal.tf.aws.bmjgroup.com" 
            }
            
            steps {
                      sh  """
                        whoami                   
                        eval \$(aws ecr get-login --no-include-email --region eu-west-1)
                        sudo docker pull ${DOCKER_IMAGE}
                        """
            }
            
        }
        //-----------------------------------------------------------------------------------------                     
        // Symlink to modules 
        //-----------------------------------------------------------------------------------------                     
        stage('New Symlink for modules') {
             agent { 
                 label "jenkins-slave-${params.stack}-301.internal.tf.aws.bmjgroup.com" 
             }
             steps{
                  sh  """
                   pwd
                   ln -sf ./modules_tf/modules modules
                  """
                 
                 }
            
        }
        //-----------------------------------------------------------------------------------------                     
        // init     
        //-----------------------------------------------------------------------------------------                     
        stage('Terraform Init') {
            agent { 
                label "jenkins-slave-${params.stack}-301.internal.tf.aws.bmjgroup.com" 
            }
            steps {
                
                    sh  """
                        echo "-------------------------\n"
                        pwd
                        ${TERRAFORM_CMD} init -backend=true -backend-config="components/${COMPONENT}/params/${params.stack}/backends.tfvars"  -input=false  ./components/infra/ 
                                               
                        """
                
            }
            
        }
        //-----------------------------------------------------------------------------------------                     
        // Plan 
        //-----------------------------------------------------------------------------------------                     
        stage('Terrafrom Plan') {
            agent { 
                label "jenkins-slave-${params.stack}-301.internal.tf.aws.bmjgroup.com" 
            }
            steps {
                
                    sh  """
                        ${TERRAFORM_CMD} plan -refresh=true -out=./components/${COMPONENT}/plan.tfout -var-file=components/${COMPONENT}/params/${params.stack}/params.tfvars ./components/${COMPONENT}/
                        """
                }
            
        }
        //-----------------------------------------------------------------------------------------                     
        // Selection Apply or Destroy 
        //-----------------------------------------------------------------------------------------                     
        stage('Apply or Destroy') {
            agent 
            {
                label "jenkins-slave-${params.stack}-301.internal.tf.aws.bmjgroup.com" 
            }
            
            steps {
                script {
                    //-----------------------------------------------------------------------------------------                     
                    // apply 
                    //-----------------------------------------------------------------------------------------                     
                    if(env.ACTION == 'apply'){
                        script {
                            timeout(time: 90, unit: 'MINUTES') {
                            input(id: "Apply Gate", message: "Apply?", ok: 'Apply')
                            }
                        }
                        currentBuild.displayName = "TF Apply for ${env.PROJECT} in ${env.STACK}"
                        echo 'apply'
                        sh  """
                        ${TERRAFORM_CMD} apply -lock=true -input=false ./components/${COMPONENT}/plan.tfout
                        """
                        cleanWs()
                    }
                    //-----------------------------------------------------------------------------------------                     
                    // endif
                    //-----------------------------------------------------------------------------------------

                    //-----------------------------------------------------------------------------------------        
                    // auto approve   
                    //-----------------------------------------------------------------------------------------        
                    if(env.ACTION == 'autoapply') {
                        currentBuild.displayName = "TF Auto Apply for ${env.PROJECT} in ${env.STACK}"
                        echo 'apply'
                        sh  """
                        ${TERRAFORM_CMD} apply -lock=true -input=false ./components/${COMPONENT}/plan.tfout
                        """
                        cleanWs()
                    }    
                    //-----------------------------------------------------------------------------------------                     
                    // endif
                    //-----------------------------------------------------------------------------------------

                    //-----------------------------------------------------------------------------------------    
                    // destroy     
                    //-----------------------------------------------------------------------------------------
                    if(env.ACTION == 'destroy' ) {
                        script {
                            timeout(time: 90, unit: 'MINUTES') {
                            input(id: "Destroy Gate", message: "Destroy?", ok: 'Destroy')
                            }
                        }
                        currentBuild.displayName = "TF Destroy for ${env.PROJECT} in ${env.STACK}"
                        echo 'destroy'
                        sh  """
                        ${TERRAFORM_CMD} destroy -auto-approve -var-file=components/${COMPONENT}/params/${params.stack}/params.tfvars ./components/${COMPONENT}/
                        """
                        cleanWs()
                    }    
			       
                    //-----------------------------------------------------------------------------------------                     
                    // endif
                    //-----------------------------------------------------------------------------------------

                    //-----------------------------------------------------------------------------------------
                    //auto destroy 
                    //-----------------------------------------------------------------------------------------
            	    if(env.ACTION == 'autodestroy') {
                        currentBuild.displayName = "TF Auto Destroy for ${env.PROJECT} in ${env.STACK}"
                        if(env.STACK != 'live') {
                            echo 'destroy'
                            sh  """
                            ${TERRAFORM_CMD} destroy -auto-approve -var-file=components/${COMPONENT}/params/${params.stack}/params.tfvars ./components/${COMPONENT}/
                            """
                            cleanWs()
                        }
                    }       
                    //-----------------------------------------------------------------------------------------                     
                    // endif
                    //-----------------------------------------------------------------------------------------
                }
            }
        }
    }
       
}